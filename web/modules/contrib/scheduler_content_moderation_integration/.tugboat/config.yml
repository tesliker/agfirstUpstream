services:
  php:
    image: q0rban/tugboat-drupal:9.3
    default: true
    http: false
    depends: mysql
    commands:
      init: |
        # Install the bcmath extension, required for commerce_product
        docker-php-ext-install bcmath

      update: |
        set -eux

        # Check out a branch using the unique Tugboat ID for this repository, to
        # ensure we don't clobber an existing branch.
        git checkout -b $TUGBOAT_REPO_ID

        # Composer is hungry. You need a Tugboat project with a pretty sizeable
        # chunk of memory.
        export COMPOSER_MEMORY_LIMIT=-1

        # This is an environment variable we added in the Dockerfile that
        # provides the path to Drupal composer root (not the web root).
        cd $DRUPAL_COMPOSER_ROOT

        # We configure the Drupal project to use the checkout of the module as a
        # Composer package repository.
        composer config repositories.tugboat vcs $TUGBOAT_ROOT

        # Now we can require this module, specifing the branch name we created
        # above that uses the $TUGBOAT_REPO_ID environment variable.
        composer require drupal/scheduler_content_moderation_integration:dev-$TUGBOAT_REPO_ID

        # Get other useful modules to assist testing.
        composer require drupal/devel_generate
        composer require drupal/module_filter

        # Install Drupal on the site.
        vendor/bin/drush \
          --yes \
          --db-url=mysql://tugboat:tugboat@mysql:3306/tugboat \
          --site-name="SCMI issue ${TUGBOAT_PREVIEW_NAME}" \
          --account-pass=admin \
          site:install standard

        # Set up the files directory permissions.
        mkdir -p $DRUPAL_DOCROOT/sites/default/files
        chgrp -R www-data $DRUPAL_DOCROOT/sites/default/files
        chmod 2775 $DRUPAL_DOCROOT/sites/default/files
        chmod -R g+w $DRUPAL_DOCROOT/sites/default/files

        # Enable modules.
        vendor/bin/drush --yes pm:enable scheduler devel devel_generate module_filter \
          scheduler_content_moderation_integration

        # Show versions.
        composer show drupal/scheduler | egrep 'name |vers'
        composer show drupal/scheduler_content_moderation_integration | egrep 'name |vers'
        vendor/bin/drush pml | grep scheduler
        composer show drupal/devel | egrep 'name |vers'
        vendor/bin/drush pml | grep devel

        # Scheduler general settings.
        vendor/bin/drush -y config-set scheduler.settings allow_date_only 1
        vendor/bin/drush -y config-set scheduler.settings default_time '04:06:00'
        vendor/bin/drush config-get scheduler.settings

        # Scheduler content settings.
        vendor/bin/drush -y config-set node.type.article third_party_settings.scheduler.publish_enable 1
        vendor/bin/drush -y config-set node.type.article third_party_settings.scheduler.unpublish_enable 1
        vendor/bin/drush -y config-set node.type.article third_party_settings.scheduler.expand_fieldset 'always'
        vendor/bin/drush -y config-set node.type.article third_party_settings.scheduler.fields_display_mode 'fieldset'
        vendor/bin/drush -y config-set node.type.article third_party_settings.scheduler.publish_past_date 'schedule'
        vendor/bin/drush config-get node.type.article third_party_settings

        # Turn on moderation for article and image, using default editorial workflow
        vendor/bin/drush -y config-set workflows.workflow.editorial type_settings.entity_types.node.0 article
        vendor/bin/drush config-get workflows.workflow.editorial type_settings.entity_types

        # Create a role which has all of the scheduler permissions.
        vendor/bin/drush role-create 'scheduler_editor' 'Scheduler Editor'
        vendor/bin/drush role-add-perm 'scheduler_editor' 'schedule publishing of nodes, view scheduled content'

        # Create a role which has all permissions for the default editorial workflow.
        vendor/bin/drush role-create 'moderator' 'Moderator'
        vendor/bin/drush role-add-perm 'moderator' \
          "use editorial transition create_new_draft, use editorial transition publish,\
          use editorial transition archive, use editorial transition archived_published,\
          use editorial transition archived_draft, view latest version, view any unpublished content"

        # Add some permissions for all authenticated users.
        vendor/bin/drush role-add-perm 'authenticated' "create article content, edit any article content,\
          delete any article content, access content overview, view own unpublished content, switch users"

        # Create users and give them roles.
        vendor/bin/drush user-create 'Eddie editor'
        vendor/bin/drush user-add-role 'scheduler_editor' 'Eddie editor'
        vendor/bin/drush user-create 'Moby moderator'
        vendor/bin/drush user-add-role 'moderator' 'Moby moderator'
        vendor/bin/drush user-create 'Paisley publisher'
        vendor/bin/drush user-add-role 'scheduler_editor' 'Paisley publisher'
        vendor/bin/drush user-add-role 'moderator' 'Paisley publisher'

        # Generate content.
        vendor/bin/drush devel-generate-content 5 --bundles=article --verbose

        # @todo Place the 'Switch users' block in first sidebar.
        # @todo Add 'content overview' to tools menu.

      build: |
        set -eux

        # Delete and re-check out this branch in case this is built from a Base Preview.
        git branch -D $TUGBOAT_REPO_ID && git checkout -b $TUGBOAT_REPO_ID || true
        export COMPOSER_MEMORY_LIMIT=-1
        cd $DRUPAL_COMPOSER_ROOT
        composer install --optimize-autoloader

        # Update this module, including all dependencies.
        composer update drupal/scheduler --with-all-dependencies
        vendor/bin/drush --yes updb
        vendor/bin/drush cache:rebuild

  mysql:
    image: tugboatqa/mariadb
